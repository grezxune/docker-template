type Word {
  value: String!
  count: Int!
  day: Day! @relation(name: "SUBMITTED_ON", direction: "OUT")
}

type Day {
  date: Date!
  words: [Word!]! @relation(name: "SUBMITTED_ON", direction: "IN")
  totalSubmissions: Int!
    @cypher(
      statement: """
      MATCH (this) <-[:SUBMITTED_ON]- (word :Word)
      RETURN SUM(word.count) AS totalSubmissions
      """
    )
}

type Query {
  Word(filter: WordFilter!): [Word!]!
    @cypher(
      statement: """
      MATCH (word :Word) -[SUBMITTED_ON]-> (day :Day { date: date($filter.day) })
      RETURN word
      """
    )
  day(filter: DayFilter!): Day
    @cypher(
      statement: """
      MATCH (day :Day { date: date($filter.day) } )
      RETURN day
      """
    )
}

type Mutation {
  CreateWord(value: String, day: String!): Word
    @cypher(
      statement: """
      MERGE (neoDay :Day { date: date($day) })
      WITH neoDay
      MERGE (word :Word { value: $value }) -[:SUBMITTED_ON]-> (neoDay)
      ON CREATE SET word.count = 1
      ON MATCH SET word.count = word.count + 1
      RETURN word
      """
    )
}

input DayFilter {
  day: String!
}

input WordFilter {
  day: String!
}

type CreateWordPayload {
  word: Word
}
